# QCA OSSL

INCLUDE(CheckFunctionExists)
SET(CMAKE_REQUIRED_LIBRARIES ${OPENSSL_LIBRARIES})
CHECK_FUNCTION_EXISTS(EVP_md2 HAVE_OPENSSL_MD2)
IF (HAVE_OPENSSL_MD2)
  ADD_DEFINITIONS(-DHAVE_OPENSSL_MD2)
ELSE (HAVE_OPENSSL_MD2)
  MESSAGE(WARNING "qca-ossl will be compiled without MD2 digest algorithm support")
ENDIF (HAVE_OPENSSL_MD2)

CHECK_FUNCTION_EXISTS(EVP_aes_128_ctr HAVE_OPENSSL_AES_CTR)
IF (HAVE_OPENSSL_AES_CTR)
  ADD_DEFINITIONS(-DHAVE_OPENSSL_AES_CTR)
ELSE (HAVE_OPENSSL_AES_CTR)
  MESSAGE(WARNING "qca-ossl will be compiled without AES CTR mode encryption support")
ENDIF (HAVE_OPENSSL_AES_CTR)

SET(QCA_OSSL_SOURCES qca-ossl.cpp)

MY_AUTOMOC( QCA_OSSL_SOURCES )

ADD_LIBRARY(qca-ossl MODULE ${QCA_OSSL_SOURCES})
INCLUDE_DIRECTORIES(${OPENSSL_INCLUDE_DIR})
TARGET_LINK_LIBRARIES(qca-ossl ${QT_QTCORE_LIBRARY})
TARGET_LINK_LIBRARIES(qca-ossl ${QCA_LIB_NAME})
TARGET_LINK_LIBRARIES(qca-ossl ${OPENSSL_LIBRARIES})

IF (APPLE)
  TARGET_LINK_LIBRARIES(qca-ossl crypto)
ENDIF (APPLE)

IF (WIN32)
  ADD_DEFINITIONS(-DOSSL_097)
  TARGET_LINK_LIBRARIES(qca-ossl gdi32)
  TARGET_LINK_LIBRARIES(qca-ossl wsock32)
  TARGET_LINK_LIBRARIES(qca-ossl ${OPENSSL_EAY_LIBRARIES})
ENDIF (WIN32)

INSTALL(TARGETS qca-ossl
        LIBRARY DESTINATION "${QCA_PLUGINS_INSTALL_DIR}"
        ARCHIVE DESTINATION "${QCA_PLUGINS_INSTALL_DIR}"
        RUNTIME DESTINATION "${QCA_PLUGINS_INSTALL_DIR}"
)
